import preprocessFunctions as ppf
import pandas as pd
import numpy as np
import json



# Descargamos el dataset de Microsoft Malware Prediction
ppf.download_dataset()


# Leamos el .json con el diccionario de los dtypes
with open('dtypes_dict.json', 'r') as f:
    dtypes_dict = json.load(f)


# Columnas a leer del CSV
columns_to_read = ['ProductName', 'EngineVersion', 'AppVersion', 'AvSigVersion',
            'IsBeta', 'RtpStateBitfield', 'IsSxsPassiveMode', 'DefaultBrowsersIdentifier','AVProductsInstalled','AVProductsEnabled',
            'AVProductStatesIdentifier', 'AVProductsInstalled', 'AVProductsEnabled', 'HasTpm',
            'CountryIdentifier', 'CityIdentifier', 'OrganizationIdentifier', 'GeoNameIdentifier',
            'LocaleEnglishNameIdentifier', 'Platform', 'Processor', 'OsVer', 'OsBuild', 'OsSuite',
            'OsPlatformSubRelease','OsBuildLab', 'SkuEdition', 'IsProtected', 'AutoSampleOptIn',

            
            'Census_OSArchitecture', 'Census_OSBranch', 'Census_OSWUAutoUpdateOptionsName',
            'Census_IsPortableOperatingSystem', 'Census_GenuineStateName',
            'Census_ActivationChannel', 'Census_IsFlightingInternal',
            'Census_FirmwareManufacturerIdentifier', 'Census_IsSecureBootEnabled',
            'Census_IsWIMBootEnabled', 'Census_IsVirtualDevice', 'Census_IsTouchEnabled',
            'Census_IsPenCapable', 'Census_IsAlwaysOnAlwaysConnectedCapable','Wdft_IsGamer',


            'SMode', 'SmartScreen', 'Firewall', 'UacLuaenable', 'Census_MDC2FormFactor', 'Census_DeviceFamily', 'Census_OEMNameIdentifier', 'Census_OEMModelIdentifier',
                   'Census_ProcessorCoreCount', 'Census_ProcessorManufacturerIdentifier','Census_PrimaryDiskTotalCapacity',
                   'Census_PrimaryDiskTypeName', 'Census_SystemVolumeTotalCapacity', 'Census_TotalPhysicalRAM', 'Census_ChassisTypeName', 'Census_InternalPrimaryDiagonalDisplaySizeInInches',
                   'Census_InternalPrimaryDisplayResolutionHorizontal', 'Census_InternalPrimaryDisplayResolutionVertical', 'Census_PowerPlatformRoleName', 'HasDetections'


            # Variable objetivo
            'HasDetections'
]


# Leemos el archivo CSV para obtener el DataFrame de pandas
df = ppf.read_malware_csv(file_path='train.csv', dtypes_dict=dtypes_dict,
                          columns=columns_to_read)



llenarNull = ['RtpStateBitfield', 'DefaultBrowsersIdentifier', 'CityIdentifier', 'GeoNameIdentifier','OrganizationIdentifier', 'OsBuildLab', 'SMode',
        'Firewall',
        'UacLuaenable',
        'Census_TotalPhysicalRAM',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches',
        'Census_InternalPrimaryDisplayResolutionVertical',
        'Census_InternalPrimaryDisplayResolutionHorizontal']
cat = ['EngineVersion','AppVersion', 'AvSigVersion','DefaultBrowsersIdentifier', 'CountryIdentifier', 'CityIdentifier', 'GeoNameIdentifier', 'OrganizationIdentifier', 'OsVer', 'OsBuild', 'OsSuite', 'OsBuildLab']



drop_columns = ['EngineVersion', 'AppVersion','AvSigVersion', 'DefaultBrowsersIdentifier', 'CountryIdentifier', 'CityIdentifier', 'GeoNameIdentifier', 'OrganizationIdentifier', 'OsVer', 'OsBuild', 'OsSuite', 'OsBuildLab']

columnas_nulos_texto = [
        'Census_PrimaryDiskTypeName'
    ]

encode = ['ProductName', 'SkuEdition', 'EngineVersion_riesgo','AppVersion_riesgo', 'AvSigVersion_riesgo','DefaultBrowsersIndetifier_riesgo', 'CountryIdentifier_riesgo', 'CityIdentifier_riesgo', 'GeoNameIdentifier_riesgo', 'OrganizationIdentifier_riesgo', 'OsVer_riesgo', 'OsBuild_riesgo', 'OsSuite_riesgo', 'OsBuildLab_riesgo']

ppf.llenarNulos(df, llenarNull)
ppf.categorizar(df, cat)


# Columnas a codificar por nulo o no nulo (missing values)
columns_to_null_encode = ['Census_IsFlightingInternal',
                          'Census_FirmwareManufacturerIdentifier',
                          'Census_IsWIMBootEnabled',
]

# Columnas para aplicar One-Hot Encoding
columns_to_one_hot = ['Census_OSArchitecture', 'Census_OSBranch',
                      'Census_OSWUAutoUpdateOptionsName',
                      'Census_ActivationChannel'
]

# Columnas para imputación
columns_to_impute = ['Census_IsVirtualDevice',
                     'Census_IsAlwaysOnAlwaysConnectedCapable',
                     'Wdft_IsGamer',
]

# Aplicamos codificación por nulo a las columnas especificadas
for col in columns_to_null_encode:
    ppf.codificar_por_nulo(df, col)

# Aplicamos One-Hot Encoding a las columnas especificadas
for col in columns_to_one_hot:
    df = ppf.dummy_encode(df, col)




 # Aplicar limpieza modular usando las funciones importadas
df = ppf.llenar_nulos_con_texto(df, columnas_nulos_texto, "UNKNOWN")
df = ppf.limpiar_smartscreen(df)
df = ppf.limpiar_chassis_type(df)
df = ppf.limpiar_power_platform(df)
df = ppf.agrupar_valores_poco_representativos(df, 'SmartScreen', umbral=0.02, nombre_categoria='Others')
